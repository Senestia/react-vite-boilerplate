---
globs: app/*
alwaysApply: false
---

## Purpose

Concise, enforceable rules for building front-end features in this repo.

## Tech Stack & Mode

- Vite + React Router v7 (Framework Mode, no SSR) + Tailwind CSS v4 + TypeScript
- Follow React Router v7 best practices; use file-based routing under `app/`

## Structure & Organization

- Route entry per folder: `index.tsx`
- Segment layout per folder: `layout.tsx` (presentational only; one per segment)
- Page folders may include: `components/`, `containers/`, `hooks/`, `services/`, `constants/`, `repositories/`, `types/`, `utils/`
- Shared, reusable assets live in `app/shared/`
- Tests live under `tests/`, mirroring feature structure

```
app/routes/
├── home/
│   ├── components/
│   └── index.tsx             # Home route component
├── notFound/
│   ├── components/
│   └── index.tsx             # Page not found route component
├── [page-name]/
│   │   └── $[path]           # Optional nested dynamic route
│   ├── layout.tsx            # Optional layout route for this segment
│   ├── index.tsx             # Main route component
│   ├── components/           # Page-specific UI components
│   ├── containers/           # Page-specific business logic containers
│   ├── hooks/                # Page-specific custom hooks
│   ├── services/             # Page-specific API services
│   ├── constants/            # Page-specific constants and static data
│   ├── repositories/         # Page-specific data provider definitions
│   ├── types/                # Page-specific TypeScript definitions
│   └── utils/                # Page-specific utility functions
└── layout/
tests/
├── routes/[page-name]/
└── shared/
```

## Repositories & HTTP

- Repositories are pure data providers (no React). Return typed models and propagate errors. No side effects
- Place repositories under `app/routes/[page]/repositories/` or `app/shared/repositories/` (if shared)
- Centralize HTTP clients and endpoints in `app/shared/utils/` and `app/shared/constants/`. Do not create feature-local Axios instances

## Barrels (index.ts)

- Use only when a folder has 3+ related peers or to expose a module’s public API
- One barrel per folder; export-only (no side effects); no chained re-exports
- Do not re-export across route segment boundaries
- No barrels in `components/` or `containers/`
- Inside a folder with a barrel, source files must import siblings directly (never from the barrel) and must not re-export themselves

### Types organization

- Split type definitions into focused files by model (e.g., `pokemonListItem.ts`, `pokemonDetail.ts`)
- Add a local barrel in the `types/` folder to expose the public types API
- Import from the folder barrel within the route segment (e.g., `import type { PokemonDetail } from "../types"`)

## Naming

- Components: PascalCase (e.g., `UserProfile.tsx`)
- Hooks: camelCase starting with `use` (e.g., `useUserData.ts`)
- Services: camelCase ending with `Service` (e.g., `userService.ts`)
- Barrels are always named `index.ts`

## Components vs Containers

- Components: presentational only (no data fetching/business logic)
- Containers: state, effects, API calls; compose components
- Never mix fetching and UI in the same file

## Code Quality

- Small, focused files (components ≤ 150 lines; any file ≤ 500 lines)
- Destructure props/state; prefer modern ES features and async/await
- Strict TypeScript; no `any`
- DRY: extract shared logic into hooks/utils/shared components
- Extract oversized components into smaller subcomponents. Keep extracted parts within the current route scope; if reused by sibling pages/components, move to the parent route segment; if reused across features, promote to `app/shared/components/`

## React Router v7

- File-based routing by default
- Loaders: only for URL-driven or must-block-first-paint data, or when needed for  handle errors
- Actions: for form submissions/mutations
- Lazy-load routes by default; use layout routes for guards

## Data Loading

- Non-blocking/interactive data: fetch in containers/hooks after render via repositories
- Provide `ErrorBoundary` for failures

## Styling (Tailwind v4)

- Prefer utilities over custom CSS; create reusable variants
- Mobile-first; use semantic HTML; avoid unnecessary wrapper elements
- Organize CSS in `app.css`, `components.css`, `utilities.css`

## React Practices

- Functional components with explicit prop interfaces; use default parameters instead of `defaultProps`
- Memoize (`React.memo`, `useMemo`, `useCallback`) when it measurably prevents re-renders
- Lists require stable, unique `key` props

## AI-Friendly Patterns

- Descriptive names; explicit types for public APIs; JSDoc for complex/public modules
- Single-purpose files; predictable folder layout; explicit exports and dependencies

## Testing

- Tests under `tests/`, mirroring features; name files `*.test.tsx` or `*.spec.tsx`
- Use React Testing Library; test behavior; mock external deps only
- Aim for ≥ 80% coverage on critical paths; use factories/fixtures

## Performance & Monitoring

- Code-split at route level by default; split large components when helpful
- Optimize assets; leverage browser caching; monitor bundle sizes
- Track Core Web Vitals; enable error tracking; maintain a performance budget; run periodic perf/a11y audits
